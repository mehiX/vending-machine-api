// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Mihai O.",
            "email": "mihai@devops-experts.me"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/buy/product/{productID}/amount/{amount}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Use the deposit to buy a product",
                "tags": [
                    "private",
                    "only buyers"
                ],
                "summary": "Buy a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Amount",
                        "name": "amount",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "situtation after the buy",
                        "schema": {
                            "$ref": "#/definitions/app.buyResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "product not found, seller not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "encoding errors",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/deposit/{coin}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deposit 1 coin at a time",
                "tags": [
                    "private",
                    "only buyers"
                ],
                "summary": "Deposit coins",
                "parameters": [
                    {
                        "enum": [
                            5,
                            10,
                            20,
                            50,
                            100
                        ],
                        "type": "integer",
                        "description": "Coin value",
                        "name": "coin",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user with updated deposit",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "deposit not updated",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Validate the application is running",
                "tags": [
                    "public"
                ],
                "summary": "Health endpoing",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "424": {
                        "description": "No DB",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Receive user credentials in body and return a valid token if they match a database record",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "jwt",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update name and/or cost for a product",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "private",
                    "product",
                    "only sellers"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "description": "product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "product not updated",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receive product data in body, validate it and save in the database",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "private",
                    "product",
                    "only sellers"
                ],
                "summary": "Create a product",
                "parameters": [
                    {
                        "description": "product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.createProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "product not created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/list": {
            "get": {
                "description": "List all products in the database",
                "tags": [
                    "public",
                    "product"
                ],
                "summary": "Products list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Product"
                            }
                        }
                    },
                    "500": {
                        "description": "error encofing data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/{productID}": {
            "get": {
                "description": "Show details for the product ID in the path",
                "tags": [
                    "public",
                    "product"
                ],
                "summary": "Product details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Product"
                        }
                    },
                    "404": {
                        "description": "product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error encofing data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receive product ID in the context and delete it from the database",
                "tags": [
                    "private",
                    "product",
                    "only sellers"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "productID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "product not created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reset": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Resets a buyer's deposit to 0",
                "tags": [
                    "private",
                    "only buyers"
                ],
                "summary": "Reset deposit",
                "responses": {
                    "200": {
                        "description": "user with reset deposit",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "500": {
                        "description": "reset error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches data from the auth token and returns it as a json object",
                "tags": [
                    "private"
                ],
                "summary": "Get information about current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/app.currentUserResponse"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Receive user data in body, validate it and save in the database",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Add a new user",
                "parameters": [
                    {
                        "description": "user data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.addUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "user not created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "app.addUserRequest": {
            "type": "object",
            "properties": {
                "deposit": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "app.buyResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "product": {
                    "$ref": "#/definitions/app.prodNoAvailability"
                }
            }
        },
        "app.createProductRequest": {
            "type": "object",
            "properties": {
                "amount_available": {
                    "type": "integer"
                },
                "cost": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "app.currentUserResponse": {
            "type": "object",
            "properties": {
                "deposit": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "app.loginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "app.prodNoAvailability": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sellerName": {
                    "type": "string"
                }
            }
        },
        "app.updateProductRequest": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "amount_available": {
                    "type": "integer"
                },
                "cost": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "deposit": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:7777",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Vending Machine API",
	Description:      "API for a vending machine, allowing users with a “seller” role to add, update or remove products, while users with a “buyer” role can deposit coins into the machine and make purchases",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
