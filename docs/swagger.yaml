definitions:
  app.addUserRequest:
    properties:
      deposit:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  app.createProductRequest:
    properties:
      amount_available:
        type: integer
      cost:
        type: integer
      name:
        type: string
    type: object
  app.currentUserResponse:
    properties:
      deposit:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  app.loginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.Product:
    properties:
      amount_available:
        type: integer
      cost:
        type: integer
      id:
        type: string
      name:
        type: string
      seller_id:
        type: string
    type: object
info:
  contact: {}
  title: Vending Machine API
  version: "1.0"
paths:
  /health:
    get:
      description: Validate the application is running
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health endpoing
      tags:
      - public
  /login:
    post:
      consumes:
      - application/json
      description: Receive user credentials in body and return a valid token if they
        match a database record
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app.loginRequest'
      responses:
        "200":
          description: jwt
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "401":
          description: not authorized
          schema:
            type: string
      summary: User login
      tags:
      - public
  /product:
    post:
      consumes:
      - application/json
      description: Receive product data in body, validate it and save in the database
      parameters:
      - description: product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/app.createProductRequest'
      responses:
        "201":
          description: ""
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: product not created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a product
      tags:
      - private
      - product
      - only sellers
  /product/{productID}:
    delete:
      description: Receive product ID in the context and delete it from the database
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: bad request
          schema:
            type: string
        "401":
          description: not authorized
          schema:
            type: string
        "500":
          description: product not created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - private
      - product
      - only sellers
    get:
      description: Show details for the product ID in the path
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "404":
          description: product not found
          schema:
            type: string
        "500":
          description: error encofing data
          schema:
            type: string
      summary: Product details
      tags:
      - public
      - product
  /product/list:
    get:
      description: List all products in the database
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Product'
            type: array
        "500":
          description: error encofing data
          schema:
            type: string
      summary: Products list
      tags:
      - public
      - product
  /user:
    get:
      description: Fetches data from the auth token and returns it as a json object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.currentUserResponse'
        "400":
          description: bad request
          schema:
            type: string
        "401":
          description: not authorized
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get information about current user
      tags:
      - private
    post:
      consumes:
      - application/json
      description: Receive user data in body, validate it and save in the database
      parameters:
      - description: user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/app.addUserRequest'
      responses:
        "201":
          description: ""
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: user not created
          schema:
            type: string
      summary: Add a new user
      tags:
      - public
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
